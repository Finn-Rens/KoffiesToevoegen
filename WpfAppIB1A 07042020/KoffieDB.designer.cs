#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WpfAppIB1A_07042020
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="koffiedb")]
	public partial class KoffieDBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Insertkoffie(koffie instance);
    partial void Updatekoffie(koffie instance);
    partial void Deletekoffie(koffie instance);
    partial void Insertkofsmaak(kofsmaak instance);
    partial void Updatekofsmaak(kofsmaak instance);
    partial void Deletekofsmaak(kofsmaak instance);
    partial void Insertsmaak(smaak instance);
    partial void Updatesmaak(smaak instance);
    partial void Deletesmaak(smaak instance);
    #endregion
		
		public KoffieDBDataContext() : 
				base(global::WpfAppIB1A_07042020.Properties.Settings.Default.koffiedbConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public KoffieDBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public KoffieDBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public KoffieDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public KoffieDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<koffie> koffies
		{
			get
			{
				return this.GetTable<koffie>();
			}
		}
		
		public System.Data.Linq.Table<kofsmaak> kofsmaaks
		{
			get
			{
				return this.GetTable<kofsmaak>();
			}
		}
		
		public System.Data.Linq.Table<smaak> smaaks
		{
			get
			{
				return this.GetTable<smaak>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.koffie")]
	public partial class koffie : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _kid;
		
		private string _koffienaam;
		
		private EntitySet<kofsmaak> _kofsmaaks;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnkidChanging(int value);
    partial void OnkidChanged();
    partial void OnkoffienaamChanging(string value);
    partial void OnkoffienaamChanged();
    #endregion
		
		public koffie()
		{
			this._kofsmaaks = new EntitySet<kofsmaak>(new Action<kofsmaak>(this.attach_kofsmaaks), new Action<kofsmaak>(this.detach_kofsmaaks));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_kid", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int kid
		{
			get
			{
				return this._kid;
			}
			set
			{
				if ((this._kid != value))
				{
					this.OnkidChanging(value);
					this.SendPropertyChanging();
					this._kid = value;
					this.SendPropertyChanged("kid");
					this.OnkidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_koffienaam", DbType="VarChar(50)")]
		public string koffienaam
		{
			get
			{
				return this._koffienaam;
			}
			set
			{
				if ((this._koffienaam != value))
				{
					this.OnkoffienaamChanging(value);
					this.SendPropertyChanging();
					this._koffienaam = value;
					this.SendPropertyChanged("koffienaam");
					this.OnkoffienaamChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="koffie_kofsmaak", Storage="_kofsmaaks", ThisKey="kid", OtherKey="kid")]
		public EntitySet<kofsmaak> kofsmaaks
		{
			get
			{
				return this._kofsmaaks;
			}
			set
			{
				this._kofsmaaks.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_kofsmaaks(kofsmaak entity)
		{
			this.SendPropertyChanging();
			entity.koffie = this;
		}
		
		private void detach_kofsmaaks(kofsmaak entity)
		{
			this.SendPropertyChanging();
			entity.koffie = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.kofsmaak")]
	public partial class kofsmaak : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _kid;
		
		private System.Nullable<int> _sid;
		
		private EntityRef<koffie> _koffie;
		
		private EntityRef<smaak> _smaak;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnkidChanging(System.Nullable<int> value);
    partial void OnkidChanged();
    partial void OnsidChanging(System.Nullable<int> value);
    partial void OnsidChanged();
    #endregion
		
		public kofsmaak()
		{
			this._koffie = default(EntityRef<koffie>);
			this._smaak = default(EntityRef<smaak>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_kid", DbType="Int")]
		public System.Nullable<int> kid
		{
			get
			{
				return this._kid;
			}
			set
			{
				if ((this._kid != value))
				{
					if (this._koffie.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnkidChanging(value);
					this.SendPropertyChanging();
					this._kid = value;
					this.SendPropertyChanged("kid");
					this.OnkidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sid", DbType="Int")]
		public System.Nullable<int> sid
		{
			get
			{
				return this._sid;
			}
			set
			{
				if ((this._sid != value))
				{
					if (this._smaak.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnsidChanging(value);
					this.SendPropertyChanging();
					this._sid = value;
					this.SendPropertyChanged("sid");
					this.OnsidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="koffie_kofsmaak", Storage="_koffie", ThisKey="kid", OtherKey="kid", IsForeignKey=true)]
		public koffie koffie
		{
			get
			{
				return this._koffie.Entity;
			}
			set
			{
				koffie previousValue = this._koffie.Entity;
				if (((previousValue != value) 
							|| (this._koffie.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._koffie.Entity = null;
						previousValue.kofsmaaks.Remove(this);
					}
					this._koffie.Entity = value;
					if ((value != null))
					{
						value.kofsmaaks.Add(this);
						this._kid = value.kid;
					}
					else
					{
						this._kid = default(Nullable<int>);
					}
					this.SendPropertyChanged("koffie");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="smaak_kofsmaak", Storage="_smaak", ThisKey="sid", OtherKey="sid", IsForeignKey=true)]
		public smaak smaak
		{
			get
			{
				return this._smaak.Entity;
			}
			set
			{
				smaak previousValue = this._smaak.Entity;
				if (((previousValue != value) 
							|| (this._smaak.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._smaak.Entity = null;
						previousValue.kofsmaaks.Remove(this);
					}
					this._smaak.Entity = value;
					if ((value != null))
					{
						value.kofsmaaks.Add(this);
						this._sid = value.sid;
					}
					else
					{
						this._sid = default(Nullable<int>);
					}
					this.SendPropertyChanged("smaak");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.smaak")]
	public partial class smaak : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _sid;
		
		private string _smaaknaam;
		
		private EntitySet<kofsmaak> _kofsmaaks;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnsidChanging(int value);
    partial void OnsidChanged();
    partial void OnsmaaknaamChanging(string value);
    partial void OnsmaaknaamChanged();
    #endregion
		
		public smaak()
		{
			this._kofsmaaks = new EntitySet<kofsmaak>(new Action<kofsmaak>(this.attach_kofsmaaks), new Action<kofsmaak>(this.detach_kofsmaaks));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sid", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int sid
		{
			get
			{
				return this._sid;
			}
			set
			{
				if ((this._sid != value))
				{
					this.OnsidChanging(value);
					this.SendPropertyChanging();
					this._sid = value;
					this.SendPropertyChanged("sid");
					this.OnsidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="smaak", Storage="_smaaknaam", DbType="VarChar(50)")]
		public string smaaknaam
		{
			get
			{
				return this._smaaknaam;
			}
			set
			{
				if ((this._smaaknaam != value))
				{
					this.OnsmaaknaamChanging(value);
					this.SendPropertyChanging();
					this._smaaknaam = value;
					this.SendPropertyChanged("smaaknaam");
					this.OnsmaaknaamChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="smaak_kofsmaak", Storage="_kofsmaaks", ThisKey="sid", OtherKey="sid")]
		public EntitySet<kofsmaak> kofsmaaks
		{
			get
			{
				return this._kofsmaaks;
			}
			set
			{
				this._kofsmaaks.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_kofsmaaks(kofsmaak entity)
		{
			this.SendPropertyChanging();
			entity.smaak = this;
		}
		
		private void detach_kofsmaaks(kofsmaak entity)
		{
			this.SendPropertyChanging();
			entity.smaak = null;
		}
	}
}
#pragma warning restore 1591
